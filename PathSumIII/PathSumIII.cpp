#include <iostream>
#include "../myHeaders/TreeNode.h"
#include <stack>
#include <map>
#include <unordered_map>

using namespace std;
using ll = long long;
// class Solution {
// public:
//     int pathSum(TreeNode* root, int targetSum) {
//         stack<TreeNode*> nodeStack;
//         DFS(root, nodeStack);

//         int numberofPath = 0;

//         while (!nodeStack.empty())
//         {
//             TreeNode* curNode = nodeStack.top();
//             nodeStack.pop();

//             DFS(curNode, 0, targetSum, numberofPath);
//         }


//         return numberofPath;
//     }

//     void DFS(TreeNode* node, ll sumofPath, int targetSum, int& numberofPath)
//     {
//         // if (!node)
//         //     return;

//         sumofPath += node->val;
//         if (sumofPath == targetSum)
//             numberofPath++;
            

//         if (node->left)
//         {
//             DFS(node->left, sumofPath, targetSum, numberofPath);
//         }
//         if (node->right)
//         {
//             DFS(node->right, sumofPath, targetSum, numberofPath);
//         }
//     }

//     void DFS(TreeNode* node, stack<TreeNode*>& nodeStack)
//     {
//         if (!node)
//             return;

//         nodeStack.push(node);

//         DFS(node->left, nodeStack);
//         DFS(node->right, nodeStack);
//     }
// };

class Solution {
public:
    int count = 0;
    unordered_map<ll, int> map;

    void dfs(TreeNode* node, int targetSum, int prefixSum)
    {
        if (!node)
            return;
        
        prefixSum += node->val;
        // prefixSum - targetSum 값이 map 에 존재한다면,
        if (map.find(prefixSum - targetSum) != map.end())
        {
            count += map[prefixSum - targetSum];
        }
        map[prefixSum] += 1;

        dfs(node->left, targetSum, prefixSum);
        dfs(node->right, targetSum, prefixSum);

        map[prefixSum]--;

    }

    int pathSum(TreeNode* root, int targetSum) {
        map[0] = 1;
        dfs(root, targetSum, 0);
        return count;
    }
};

int main()
{
    // auto* root = createBinaryTree({10,5,-3,3,2,NULL_NODE,11,3,-2,NULL_NODE,1});
    // int targetSum = 8;
    // auto* root = createBinaryTree({5,4,8,11,NULL_NODE,13,4,7,2,NULL_NODE,NULL_NODE,5,1});
    // int targetSum = 22;
    // auto* root = createBinaryTree({1,NULL_NODE,2,NULL_NODE,3,NULL_NODE,4,NULL_NODE,5});
    // int targetSum = 3;
    auto *root = createBinaryTree({});
    int targetSum = 1000000000;    

    printTreeLevelOrder(root);

    Solution sol;
    cout << sol.pathSum(root, targetSum) << endl;

    return 0;
}